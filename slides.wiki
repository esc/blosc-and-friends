== Blosc  ==

==== Outline ====

\tableofcontents[currentsection]

==== Disclaimer ====

* All examples with Py3
* No comparisons to other technologies

==== Blosc ====

* '''Blocking''' by operating on data in blocks
* '''Shuffling''' by doing a byte shuffle
* '''Fast''' by multithreading across '''blocks'''
* '''Metacodec''' because it can drive '''[lz4|snappy|zlib]'''

==== Blosc ====

<[center]
<<<images/blosc.pdf, scale=0.3>>>
[center]>

==== Blosc ====

* Other codecs vendored

==  Python-Blosc ==

==== Python-Blosc ====

* '''Python-Blosc''' <-- python bindings
* Blosc (and codecs) are vendored
* Can be dynamically linked

==== Code, Yo! ====[containsverbatim]

<[nowiki]
\begin{pyconcode}
>>> import blosc
>>> b = b"b"*888
>>> c = blosc.compress(b, typesize=8)
>>> len(b)/len(c)
15.857142857142858
>>> c = blosc.compress(b, typesize=1, shuffle=False,
... clevel=9, cname='lz4')
>>> len(b)/len(c)
23.36842105263158
\end{pyconcode}
[nowiki]>

==== C'mmon man, your pulling my leg?! ==== [containsverbatim]

<[pyconcode]
>>> d = blosc.decompress(compressed)
>>> assert b == d
[pyconcode]>

==== What Up? ====

* Long sequence of the same character
* Not hard to beat
* Feel free to try with some input of your own choosing
* Feel free to compare to @zlib@

==== Help ====

* Version 1.2.7 (latest) not Windows compatible
* Doesn't yet support compressing via buffer-interface


==== Outline ====

\tableofcontents[currentsection]

== Bloscpack ==

==== And now some «stuff» layerd on top! ====

* '''Bloscpack'''
* Command-line interface
* File-format
* '''Numpy''' array serialization
* Pure-python based on Python-Blosc

==== More Code, Yo! ====[containsverbatim]

<[pyconcode]
>>> import bloscpack, numpy
>>> b = numpy.arange(5e6)
>>> c = bloscpack.pack_ndarray_str(b)
>>> len(b)/len(c)
15.359992135684026
>>> c = bloscpack.pack_ndarray_str(b,
... blosc_args=bloscpack.BloscArgs(clevel=9, cname='lz4'))
>>> len(b)/len(c)
17.693979092794304
[pyconcode]>

==== And Back Again ====[containsverbatim]

<[pyconcode]
>>> d = bloscpack.unpack_ndarray_str(c)
>>> assert (b == d).all()
[pyconcode]>

==== Command-line Usability ====[containsverbatim]

<[pyconcode]
>>> np.save('b.npy', b)
[pyconcode]>

<[consolecode]
$ ./blpk compress b.npy
$ ./blpk compress -l 9 -c lz4 b.npy b.npy.lv9lz4.blp
$ ls -lh b.*
-rw------- 1 esc esc  39M May 13 21:50 b.npy
-rw------- 1 esc esc 319K May 13 21:52 b.npy.blp
-rw------- 1 esc esc 277K May 17 20:39 b.npy.lv9lz4.blp
[consolecode]>


==== Format ====

* A '''simple''' file format
* '''Checksum''' optional

<[center]
<<<images/bloscpack.pdf, scale=0.3>>>
[center]>

==== Numpy support ====[containsverbatim]

* Python-Blosc can also pack an array:

<[pyconcode]
>>> %timeit c = blosc.pack_array(a)
10 loops, best of 3: 40.2 ms per loop
>>> %timeit c = bloscpack.pack_ndarray_str(a)
100 loops, best of 3: 9.81 ms per loop
[pyconcode]>

* Internal copy vs. pointer operation
* Numpy metadata is stored in metadata section

==== Help ====

* @pack\_ndarray\_'''str'''@ <-- '''str''', really?!
* Py3 support not merged :(

==== Outline ====

\tableofcontents[currentsection,currentsubsection]

==== Image Slide ====

<[center]
    <<<images/python-logo.pdf, scale=0.40>>>
[center]>

==== slide 2 ====

* bullet 1
* bullet 2
* bullet 3

=== Subsection 2 ===

==== Outline ====

\tableofcontents[currentsection,currentsubsection]

==== Block ====

<[block]{Block Title}
Block contents
[block]>

==== Special Symbols ====

* Tilde: \~{}
* Tilde: \textasciitilde{}
* Caret: \^{}
* Hash: \#
* Braces: \{\}
* Dollar: \$
* Double en: -{}-
* At in Typewriter: {\tt stash@\{0\} }
* Exclamation mark in alert: \alert{Attention!}

or use: nowiki

==== Correct Escapes  ====

This only works with my patched version of wiki2beamer.

* @HEAD \@ HEAD@
* Attention\! Attention\!

==== Verbatim ====[fragile]

\begin{verbatim}

wiki2beamer slides.wiki > slides.wiki.tex
pdflatex slides.tex

\end{verbatim}

[frame]>

==== Verbatim2 ====[containsverbatim]

<[verbatim]

wiki2beamer slides.wiki > slides.wiki.tex
pdflatex slides.tex

[verbatim]>

==== Verbatim Block ====[containsverbatim]

<[block]{Verbatim Block}
<[verbatim]

wiki2beamer slides.wiki > slides.wiki.tex
pdflatex slides.tex

[verbatim]>
[block]>

==== Code ====[containsverbatim]

\begin{pycode}
def python_func(arg):
    print 'arg was: ', arg

python_func('Hello World!")
\end{pycode}

==== Code from file ====

\pyfile{code/code.py}

==== Example ====

<[example]
    This is an example
[example]>

==== Conclusion ====

* Open source tools used to make this presentation:
** \href{http://wiki2beamer.sourceforge.net/}{Wiki2beamer}
** \href{http://latex-beamer.sourceforge.net/}{\LaTeX beamer}
** \href{http://projects.gnome.org/dia/}{Dia}
** \href{http://pygments.org/}{Pygments}
** \href{http://code.google.com/p/minted/}{Minted}
** \href{https://bitbucket.org/john2x/solarized-pygment}{Solarized theme for pygments}
